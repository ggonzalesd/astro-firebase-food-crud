---
import { AstroError } from 'astro/errors';
import { getConfig, getMenu } from '@/firebase/server';
import CategoryMenu from './CategoryMenu.astro';

type State = 'ERROR' | 'WAIT' | 'SHOW' | 'SOON';
let state:State = 'ERROR';

const config = await getConfig();

if(!config || !config.working) {
  state = 'SOON';
}

const date = new Date(new Date().getTime() - 5 * 60 * 60 * 1000);
const startTime = Date.UTC(
  date.getUTCFullYear(),
  date.getUTCMonth(),
  date.getUTCDate()
);

const timeOpen = Math.floor((config?.lunch.start ?? 0) * 60);
const timeClose = Math.floor((config?.lunch.end ?? 0) * 60);

const currentSeconds = (date.getTime() - startTime) / (1000);
const currentMinutes = currentSeconds / 60;

const open = config?.working && (config.open || (currentMinutes >= timeOpen && currentMinutes <= timeClose));

const closeText = currentMinutes > timeOpen ? 'Nos vemos ma√±ana üòÅ' : 'Abrimos pronto üòÉ'
const nextTime = currentMinutes > timeOpen ? 24 * 60 - (currentMinutes-timeOpen) : timeOpen - currentMinutes;


let menu: MenuType | undefined;
if (open) {
  menu = await getMenu();
  if(menu) {
    state = 'SHOW'
  }
} else {
  if(state !== 'SOON')
    state = 'WAIT'
}
---

<section class='flex max-w-[90vw] text-zinc-700'>
  <div menu-design class='border-r-2 border-dashed border-zinc-300'></div>
  <div class='flex-grow rounded-r-md bg-zinc-300 p-2'>
    {
      (state === 'ERROR') && <div class="flex gap-8 flex-col text-center py-8 px-4">
        <span class="italic text-lg">Disculpe</span>
        <h1 class="text-4xl max-w-[10ch] font-bold">Surgi√≥ un problema</h1>
        <span class="text-9xl">ü•π</span>
    </div>
    }

    {
      (state === 'SOON') && <div class="flex gap-8 flex-col text-center py-8 px-4">
        <span class="italic text-lg">En espera</span>
        <h1 class="text-4xl max-w-[10ch] font-bold">Abrimos en unos d√≠as üòâ</h1>
        <span class="text-9xl">üç≤</span>
    </div>
    }

    {(state === 'WAIT') && <div class="flex gap-8 flex-col text-center py-8 px-4">
      <span class="italic text-lg">Disculpe</span>
      <h1 class="text-4xl max-w-[10ch] font-bold">{closeText}</h1>
      <span class="text-9xl">‚è∞</span>
      {/* <span>Abrimos los  de  a </span> */}
      <span time-attrib={nextTime} class="text-xl">Faltan --:-- horas</span>
    </div>}
    {
      (state === 'SHOW') && menu && (
        <h1 class='flex justify-center text-center text-xl font-bold'>Menu Del D√≠a</h1>
        <div class='my-2 h-[1px] w-full bg-zinc-500'></div>
        <div class='flex flex-col gap-4 md:flex-row'>
          <div>
            <CategoryMenu foods={menu.menu} title='Principal' />
          </div>
          <div>
            <CategoryMenu foods={menu.intro} title='Entradas' />
            <CategoryMenu foods={menu.other} title='Otros' />
          </div>
        </div>
      )
    }
  </div>
</section>

<script is:inline>
  const timer = document.querySelector("span[time-attrib]")
  if(timer instanceof HTMLSpanElement) {
    const value = parseFloat(timer.getAttribute('time-attrib'))

    if(!isNaN(value)) {
      const date = new Date(new Date().getTime() + value * 60 * 1000);
      setInterval(() => {
        const totalSeconds = parseInt((date.getTime() - new Date().getTime()) / (1000));

        const hours = Math.floor(totalSeconds / (60 * 60))
        const minutes = Math.floor((totalSeconds - hours*60*60) / (60))
        const seconds = Math.floor((totalSeconds - hours*60*60 - minutes * 60))

        if(totalSeconds <= 0 && -totalSeconds < 1000*5) {
          setTimeout(() => {
            window.location.replace('/')
          }, [100])
        } else {
          timer.innerText = `Faltan ${hours}h ${minutes}m ${seconds}s`;
        }
      }, [1000])


    }

  }
</script>

<style scoped>
  section {
    transform: translateY(5vh);
    animation: daily-move ease forwards;
    animation-range: 0% 100%;
    animation-timeline: scroll();
    box-shadow: 0px 0px 32px 8px #0008;
  }

  @keyframes daily-move {
    to {
      transform: translateY(-10vh);
    }
  }

  div[menu-design] {
    display: flex;
    background: radial-gradient(circle, #0000 45%, rgba(212, 212, 216, 1) 55%);
    background-size: 100% 16px;
    background-repeat: repeat-y;
    min-width: 16px;
    min-height: 100%;
  }
</style>
